<launch>
  <!-- Arguments -->
    <arg name="robot_name" default="ugv"/>
    <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.0"/>
    <arg name="node_type" default="ugv"/>
    <arg name="endpoint" default="localhost"/>
    <arg name="username" default="admin"/>
    <arg name="password" default="passw123"/>
    <arg name="port" default="1883"/>
    <arg name="base_directory" default="$(find multirobot_sim)/scripts"/>
    <arg name="secret" default="abc123"/>
    <arg name="schema"/>
  <!--Robot namespace-->
  <group ns="$(arg robot_name)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <!-- Spawn robot-->
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -model $(arg robot_name) -x $(arg x) -y $(arg y) -z $(arg z) -param robot_description" />
    <!-- Load joint state controller -->
    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
      <param name="use_gui" value="true"/>
      <param name="rate" value="50"/>
      <param name="tf_prefix" value="$(arg robot_name)" />
    </node>
    <!-- Load robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg robot_name)" />
    </node>
    <!-- Load the controller --> 
    <node pkg="multirobot_sim" type="roschain.py" name="roschain" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
    </node>
    <node pkg="multirobot_sim" type="consensus.py" name="consensus" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
    </node>   
    <node pkg="multirobot_sim" type="network.py" name="network" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
    </node>   
    <node pkg="multirobot_sim" type="discovery.py" name="discovery" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
    </node>   
    <node pkg="multirobot_sim" type="heartbeat.py" name="heartbeat" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
    </node>   
    <node pkg="multirobot_sim" type="key_store.py" name="key_store" output="screen" required="true">
        <param name="public_key_file" value="$(arg robot_name)_pk.pem"/>
        <param name="private_key_file" value="$(arg node_type)_sk.pem"/>
    </node>   
    <node pkg="multirobot_sim" type="connector.py" name="connector" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="endpoint" value="$(arg endpoint)"/>
        <param name="auth" value="$(arg username):$(arg password)"/>
        <param name="port" value="$(arg port)"/>
    </node>  
    <node pkg="multirobot_sim" type="blockchain.py" name="blockchain" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
        <param name="node_type" value="$(arg node_type)"/>
        <param name="secret" value="$(arg secret)"/>
    </node>  
    <node pkg="multirobot_sim" type="session.py" name="session" output="screen" required="true">
        <param name="node_id" value="$(arg robot_name)"/>
    </node>  

    <node pkg="multirobot_sim" type="database.py" name="database" output="screen" required="true">
      <param name="node_id" value="$(arg robot_name)"/>
      <param name="db_dir" value="$(arg base_directory)"/>
      <param name="schema" value="$(arg schema)"/>
    </node>  
  </group>
</launch>
