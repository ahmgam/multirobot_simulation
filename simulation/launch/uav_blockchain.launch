<launch>
    <!--arg name="mav_name" default="hummingbird"/-->
    <arg name="robot_name" default="uav"/>
    <arg name="mav_name" default="firefly"/>
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.0"/>
    <arg name="node_type" default="uav"/>
    <arg name="endpoint" default="localhost"/>
    <arg name="username" default="admin"/>
    <arg name="password" default="passw123"/>
    <arg name="port" default="1883"/>
    <arg name="base_directory" default="$(find multirobot_sim)/scripts"/>
    <arg name="secret" default="abc123"/>
    <arg name="schema"/>

    <!-- env variables-->
    <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
    <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
    <!-- Robot namespace-->
    <group ns="$(arg robot_name)">
        <!--Spawn the robot-->
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <arg name="mav_name" value="$(arg mav_name)" />
            <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
            <arg name="enable_logging" value="false" />
            <arg name="enable_ground_truth" value="true" />
            <arg name="log_file" value="$(arg mav_name)"/>
            <arg name="namespace" value="$(arg robot_name)"/>
            <arg name="x" value="$(arg x)"/>
            <arg name="y" value="$(arg y)"/>
            <arg name="z" value="0.0"/>
        </include>
        <!-- Load the controller -->
        <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
            <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
            <remap from="odometry" to="odometry_sensor1/odometry" />
        </node>
        <!-- Start flying -->
        <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
            <param name="x" value="$(arg x)"/>
            <param name="y" value="$(arg y)"/>
            <param name="z" value="$(arg z)"/>
        </node>
        <!-- Repeater node-->
        <node name="repeater" pkg="multirobot_sim" type="repeater.py" output="screen">
            <param name="model_name" value="$(arg robot_name)"/>
            <param name="source_topic" value="goal"/>
            <param name="target_topic" value="command/pose"/>
            <param name="path_topic" value="path"/>
        </node>
        <!-- robot state publisher-->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <!-- joint state publisher-->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
        <node pkg="multirobot_sim" type="roschain.py" name="roschain" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
        </node>
        <node pkg="multirobot_sim" type="consensus.py" name="consensus" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
        </node>   
        <node pkg="multirobot_sim" type="network.py" name="network" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
        </node>   
        <node pkg="multirobot_sim" type="discovery.py" name="discovery" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
        </node>   
        <node pkg="multirobot_sim" type="heartbeat.py" name="heartbeat" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
        </node>   
        <node pkg="multirobot_sim" type="key_store.py" name="key_store" output="screen" required="true">
            <param name="public_key_file" value="$(arg robot_name)_pk.pem"/>
            <param name="private_key_file" value="$(arg node_type)_sk.pem"/>
        </node>   
        <node pkg="multirobot_sim" type="connector.py" name="connector" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="endpoint" value="$(arg endpoint)"/>
            <param name="auth" value="$(arg username):$(arg password)"/>
            <param name="port" value="$(arg port)"/>
        </node>  
        <node pkg="multirobot_sim" type="blockchain.py" name="blockchain" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="node_type" value="$(arg node_type)"/>
            <param name="secret" value="$(arg secret)"/>
        </node>  
        <node pkg="multirobot_sim" type="session.py" name="session" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
        </node> 
        <node pkg="multirobot_sim" type="database.py" name="database" output="screen" required="true">
            <param name="node_id" value="$(arg robot_name)"/>
            <param name="db_dir" value="$(arg base_directory)"/>
            <param name="schema" value="$(arg schema)"/>
        </node>  
    </group>
</launch>
